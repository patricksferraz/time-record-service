// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeRecordServiceClient is the client API for TimeRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeRecordServiceClient interface {
	RegisterTimeRecord(ctx context.Context, in *RegisterTimeRecordRequest, opts ...grpc.CallOption) (*RegisterTimeRecordResponse, error)
	ApproveTimeRecord(ctx context.Context, in *ApproveTimeRecordRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RefuseTimeRecord(ctx context.Context, in *RefuseTimeRecordRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	FindTimeRecord(ctx context.Context, in *FindTimeRecordRequest, opts ...grpc.CallOption) (*FindTimeRecordResponse, error)
	SearchTimeRecords(ctx context.Context, in *SearchTimeRecordsRequest, opts ...grpc.CallOption) (*SearchTimeRecordsResponse, error)
	ExportTimeRecords(ctx context.Context, in *ExportTimeRecordsRequest, opts ...grpc.CallOption) (*ExportTimeRecordsResponse, error)
}

type timeRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeRecordServiceClient(cc grpc.ClientConnInterface) TimeRecordServiceClient {
	return &timeRecordServiceClient{cc}
}

func (c *timeRecordServiceClient) RegisterTimeRecord(ctx context.Context, in *RegisterTimeRecordRequest, opts ...grpc.CallOption) (*RegisterTimeRecordResponse, error) {
	out := new(RegisterTimeRecordResponse)
	err := c.cc.Invoke(ctx, "/dev.azure.com.c4ut.TimeClock.TimeRecordService/RegisterTimeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) ApproveTimeRecord(ctx context.Context, in *ApproveTimeRecordRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/dev.azure.com.c4ut.TimeClock.TimeRecordService/ApproveTimeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) RefuseTimeRecord(ctx context.Context, in *RefuseTimeRecordRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/dev.azure.com.c4ut.TimeClock.TimeRecordService/RefuseTimeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) FindTimeRecord(ctx context.Context, in *FindTimeRecordRequest, opts ...grpc.CallOption) (*FindTimeRecordResponse, error) {
	out := new(FindTimeRecordResponse)
	err := c.cc.Invoke(ctx, "/dev.azure.com.c4ut.TimeClock.TimeRecordService/FindTimeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) SearchTimeRecords(ctx context.Context, in *SearchTimeRecordsRequest, opts ...grpc.CallOption) (*SearchTimeRecordsResponse, error) {
	out := new(SearchTimeRecordsResponse)
	err := c.cc.Invoke(ctx, "/dev.azure.com.c4ut.TimeClock.TimeRecordService/SearchTimeRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeRecordServiceClient) ExportTimeRecords(ctx context.Context, in *ExportTimeRecordsRequest, opts ...grpc.CallOption) (*ExportTimeRecordsResponse, error) {
	out := new(ExportTimeRecordsResponse)
	err := c.cc.Invoke(ctx, "/dev.azure.com.c4ut.TimeClock.TimeRecordService/ExportTimeRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeRecordServiceServer is the server API for TimeRecordService service.
// All implementations must embed UnimplementedTimeRecordServiceServer
// for forward compatibility
type TimeRecordServiceServer interface {
	RegisterTimeRecord(context.Context, *RegisterTimeRecordRequest) (*RegisterTimeRecordResponse, error)
	ApproveTimeRecord(context.Context, *ApproveTimeRecordRequest) (*StatusResponse, error)
	RefuseTimeRecord(context.Context, *RefuseTimeRecordRequest) (*StatusResponse, error)
	FindTimeRecord(context.Context, *FindTimeRecordRequest) (*FindTimeRecordResponse, error)
	SearchTimeRecords(context.Context, *SearchTimeRecordsRequest) (*SearchTimeRecordsResponse, error)
	ExportTimeRecords(context.Context, *ExportTimeRecordsRequest) (*ExportTimeRecordsResponse, error)
	mustEmbedUnimplementedTimeRecordServiceServer()
}

// UnimplementedTimeRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeRecordServiceServer struct {
}

func (UnimplementedTimeRecordServiceServer) RegisterTimeRecord(context.Context, *RegisterTimeRecordRequest) (*RegisterTimeRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTimeRecord not implemented")
}
func (UnimplementedTimeRecordServiceServer) ApproveTimeRecord(context.Context, *ApproveTimeRecordRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTimeRecord not implemented")
}
func (UnimplementedTimeRecordServiceServer) RefuseTimeRecord(context.Context, *RefuseTimeRecordRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseTimeRecord not implemented")
}
func (UnimplementedTimeRecordServiceServer) FindTimeRecord(context.Context, *FindTimeRecordRequest) (*FindTimeRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTimeRecord not implemented")
}
func (UnimplementedTimeRecordServiceServer) SearchTimeRecords(context.Context, *SearchTimeRecordsRequest) (*SearchTimeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTimeRecords not implemented")
}
func (UnimplementedTimeRecordServiceServer) ExportTimeRecords(context.Context, *ExportTimeRecordsRequest) (*ExportTimeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTimeRecords not implemented")
}
func (UnimplementedTimeRecordServiceServer) mustEmbedUnimplementedTimeRecordServiceServer() {}

// UnsafeTimeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeRecordServiceServer will
// result in compilation errors.
type UnsafeTimeRecordServiceServer interface {
	mustEmbedUnimplementedTimeRecordServiceServer()
}

func RegisterTimeRecordServiceServer(s grpc.ServiceRegistrar, srv TimeRecordServiceServer) {
	s.RegisterService(&TimeRecordService_ServiceDesc, srv)
}

func _TimeRecordService_RegisterTimeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTimeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).RegisterTimeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.azure.com.c4ut.TimeClock.TimeRecordService/RegisterTimeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).RegisterTimeRecord(ctx, req.(*RegisterTimeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_ApproveTimeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTimeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).ApproveTimeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.azure.com.c4ut.TimeClock.TimeRecordService/ApproveTimeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).ApproveTimeRecord(ctx, req.(*ApproveTimeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_RefuseTimeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseTimeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).RefuseTimeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.azure.com.c4ut.TimeClock.TimeRecordService/RefuseTimeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).RefuseTimeRecord(ctx, req.(*RefuseTimeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_FindTimeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTimeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).FindTimeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.azure.com.c4ut.TimeClock.TimeRecordService/FindTimeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).FindTimeRecord(ctx, req.(*FindTimeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_SearchTimeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTimeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).SearchTimeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.azure.com.c4ut.TimeClock.TimeRecordService/SearchTimeRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).SearchTimeRecords(ctx, req.(*SearchTimeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeRecordService_ExportTimeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTimeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeRecordServiceServer).ExportTimeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.azure.com.c4ut.TimeClock.TimeRecordService/ExportTimeRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeRecordServiceServer).ExportTimeRecords(ctx, req.(*ExportTimeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeRecordService_ServiceDesc is the grpc.ServiceDesc for TimeRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.azure.com.c4ut.TimeClock.TimeRecordService",
	HandlerType: (*TimeRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTimeRecord",
			Handler:    _TimeRecordService_RegisterTimeRecord_Handler,
		},
		{
			MethodName: "ApproveTimeRecord",
			Handler:    _TimeRecordService_ApproveTimeRecord_Handler,
		},
		{
			MethodName: "RefuseTimeRecord",
			Handler:    _TimeRecordService_RefuseTimeRecord_Handler,
		},
		{
			MethodName: "FindTimeRecord",
			Handler:    _TimeRecordService_FindTimeRecord_Handler,
		},
		{
			MethodName: "SearchTimeRecords",
			Handler:    _TimeRecordService_SearchTimeRecords_Handler,
		},
		{
			MethodName: "ExportTimeRecords",
			Handler:    _TimeRecordService_ExportTimeRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time_record.proto",
}
