// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Coding4u",
            "email": "contato@coding4u.com.br"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/time-records": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for employee time records by ` + "`" + `filter` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Record"
                ],
                "summary": "search time records by filter",
                "operationId": "searchTimeRecords",
                "parameters": [
                    {
                        "type": "string",
                        "name": "approved_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "employee_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "page_token",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "refused_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rest.SearchTimeRecordsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Router for registration a new time record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Record"
                ],
                "summary": "register a new time record",
                "operationId": "registerTimeRecord",
                "parameters": [
                    {
                        "description": "JSON body for register a new time record",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.RegisterTimeRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.RegisterTimeRecordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    }
                }
            }
        },
        "/time-records/export": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for employee time records by ` + "`" + `filter` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Record"
                ],
                "summary": "search time records by filter",
                "operationId": "exportTimeRecords",
                "parameters": [
                    {
                        "type": "string",
                        "name": "approved_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "employee_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "page_token",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "refused_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rest.ExportTimeRecordsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    }
                }
            }
        },
        "/time-records/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Router for find a time record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Record"
                ],
                "summary": "find a time record",
                "operationId": "findTimeRecord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.TimeRecord"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    }
                }
            }
        },
        "/time-records/{id}/approve": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Router for approve a pending time record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Record"
                ],
                "summary": "approve a pending time record",
                "operationId": "approveTimeRecord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    }
                }
            }
        },
        "/time-records/{id}/refuse": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Router for refuse a pending time record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Time Record"
                ],
                "summary": "refuse a pending time record",
                "operationId": "refuseTimeRecord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON body for refuse a pending time record",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.RefuseTimeRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest.ExportTimeRecordsResponse": {
            "type": "object",
            "properties": {
                "next_page_token": {
                    "type": "string"
                },
                "registers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rest.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "rest.HTTPResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "a message"
                }
            }
        },
        "rest.RefuseTimeRecordRequest": {
            "type": "object",
            "required": [
                "refused_reason"
            ],
            "properties": {
                "refused_reason": {
                    "type": "string"
                }
            }
        },
        "rest.RegisterTimeRecordRequest": {
            "type": "object",
            "required": [
                "employee_id",
                "time"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "rest.RegisterTimeRecordResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "rest.SearchTimeRecordsResponse": {
            "type": "object",
            "properties": {
                "next_page_token": {
                    "type": "string"
                },
                "time_records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rest.TimeRecord"
                    }
                }
            }
        },
        "rest.TimeRecord": {
            "type": "object",
            "properties": {
                "approved_by": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "refused_by": {
                    "type": "string"
                },
                "refused_reason": {
                    "type": "string"
                },
                "regular_time": {
                    "type": "boolean"
                },
                "status": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                },
                "tz_offset": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Time Record Swagger API",
	Description: "Swagger API for Golang Project Time Record.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
